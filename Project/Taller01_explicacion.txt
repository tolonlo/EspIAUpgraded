Taller 01 - Documento de explicación
Tomas Londoño - Jesus -  Agustin figueroa
====================================

Actividad 1: Repositorio
------------------------
- Se debe crear un repositorio nuevo en GitHub y subir el contenido del taller (carpeta del proyecto).
- Recomendación: no sobrescribir el proyecto original; subir este fork/derivado para proteger la versión base.

Actividad 2: Revisión autocrítica (Usabilidad, Compatibilidad, Rendimiento, Seguridad)
--------------------------------------------------------------------------------------
Aspectos positivos del proyecto actual:
- Usabilidad: La pantalla principal `index.html` muestra una interfaz clara, botones grandes y etiquetas en español; fácil de entender.
- Compatibilidad: Uso de HTML/CSS/JS estándar y Django; funciona en navegadores modernos sin dependencias complejas en el lado cliente.
- Rendimiento: Plantillas sencillas y pocas consultas; SQLite es suficiente para desarrollo.
- Seguridad: Uso de plantillas Django (escapado por defecto) y protección CSRF en formularios.

Aspectos por mejorar y posibles acciones:
- Usabilidad: Añadir feedback de acciones (toasts), validación visual de formularios y estados de carga.
- Compatibilidad: Probar en dispositivos móviles y distintos tamaños de pantalla; aplicar layout responsive riguroso.
- Rendimiento: Introducir paginación y select_related/prefetch_related cuando haya relaciones; cachear listados frecuentes.
- Seguridad: Configurar `SECURE_*` headers para despliegues productivos, usar variables de entorno para secretos, y revisar permisos por vista.

Actividad 3: Inversión de Dependencias
--------------------------------------
- Objetivo: Desacoplar la lógica de acceso a datos del resto de la aplicación.
- Implementación: Se creó una abstracción `TaskRepository` (Protocolo) y una implementación concreta `DjangoORMTaskRepository` en `web/views.py`.
- La vista de listado no depende del ORM directamente, sino de `TaskListService` que consume `TaskRepository` y una estrategia de ordenamiento.
- Beneficio: Facilita pruebas unitarias con dobles (mocks/fakes) del repositorio y permite cambiar de ORM o fuente de datos sin tocar la capa de presentación.

Archivos relevantes:
- `web/views.py`: `TaskRepository`, `DjangoORMTaskRepository`, `TaskListService`.
- `web/models.py`: `Task` + `TaskManager`/`TaskQuerySet` para encapsular consultas (patrón de Django).

Actividad 4: Patrón de diseño en Python (Strategy)
--------------------------------------------------
- Problema: Ordenar las tareas por distintos criterios sin llenar la vista de condicionales.
- Decisión: Usar Strategy para el ordenamiento: `TaskSortStrategy` con implementaciones `SortByCreatedDesc` y `SortByTitleAsc`.
- Uso: En `TaskListView.get_queryset()` selecciona la estrategia según query param `?sort=` y delega a `TaskListService`.
- Mejora: Abierto a extensión (nuevos criterios) sin modificar el flujo principal (Principio Abierto/Cerrado).

Actividad 5: Patrones de diseño en Django
----------------------------------------
- Vistas CRUD con Class-Based Views (CBV): `TaskListView`, `TaskCreateView`, `TaskUpdateView`, `TaskDeleteView`.
  - Beneficio: Reutilización de lógica de formularios, validación y navegación; menos código repetido.
- Normalización y Manager/QuerySet personalizados en `Task`:
  - `TaskQuerySet.active()` y `TaskManager.active()` encapsulan reglas de filtrado (p. ej. excluir archivados).
  - Beneficio: Consultas coherentes y reutilizables a lo largo de la app.

BONO: Nueva funcionalidad desde cero (CRUD de Tareas)
-----------------------------------------------------
- Se añadió un CRUD básico de tareas que sirve para planificar trabajo dentro del proyecto.
- Plantillas nuevas: `task_list.html`, `task_form.html`, `task_confirm_delete.html`.
- Rutas: `/tasks/`, `/tasks/new/`, `/tasks/<id>/edit/`, `/tasks/<id>/delete/`.
- Integración en `index.html` con enlace destacado "Ir a Tareas".

Resumen de cambios de código
----------------------------
- `web/models.py`: Modelo `Task`, `TaskQuerySet`, `TaskManager`.
- `web/admin.py`: Registro de `Task` en el admin.
- `web/migrations/0001_initial.py`: Migración para `Task`.
- `web/views.py`: Reorganización de vistas; introducción de Repository, Strategy y CBVs.
- `web/urls.py`: Rutas nuevas para el CRUD.
- `web/templates/*`: Nuevas plantillas para CRUD; link en `index.html`.
